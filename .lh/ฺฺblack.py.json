{
    "sourceFile": "ฺฺblack.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1730185374819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730185380863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,26 @@\n import pygame\r\n+import random\r\n+import time\r\n+import Things\r\n+import intro\r\n+import buttons\r\n+import displayText\r\n+import Paused\r\n+import sys\r\n import os\r\n \r\n+# Display settings\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n pygame.init()\r\n screen = pygame.display.set_mode((display_width, display_height))\r\n clock = pygame.time.Clock()\r\n+sound = pygame.mixer.Sound(\"sounds/sound.wav\")   \r\n+pygame.mixer.music.load('sounds/music.mp3')\r\n+#pygame.mixer.music.play(-1)\r\n \r\n # Load GIF frames for animated background\r\n backImg_frames = []\r\n frame_folder = 'images/campnu_frames/'  # Folder containing separated frames\r\n@@ -22,27 +34,103 @@\n # Animation settings for background\r\n frame_index = 0\r\n background_fps = 10  # Adjust this to control the animation speed of the background\r\n \r\n-# Main game loop\r\n-running = True\r\n-while running:\r\n+# Load images for players and goals\r\n+ballImg = pygame.image.load('images/football.png')\r\n+goalLeftImg = pygame.image.load('images/goalLeft.png')\r\n+goalRightImg = pygame.image.load('images/goalRight.png')\r\n+boyFirstLeftNormalImg = pygame.image.load('images/ronaldo.png')\r\n+boyFirstRightNormalImg = pygame.image.load('images/ronaldo.png')\r\n+boyFirstLeftKickImg = pygame.image.load('images/ronaldo_kick.png')\r\n+boyFirstRightKickImg = pygame.image.load('images/ronaldo_kick.png')\r\n+boySecondLeftNormalImg = pygame.image.load('images/messi.png')\r\n+boySecondRightNormalImg = pygame.image.load('images/messi.png')\r\n+boySecondLeftKickImg = pygame.image.load('images/messi_kick.png')\r\n+boySecondRightKickImg = pygame.image.load('images/messi_kick.png')\r\n+boyFirstLeftVictoryImg = pygame.image.load('images/ronaldo_action.png')\r\n+boySecondRightVictoryImg = pygame.image.load('images/messi_action.png')\r\n+\r\n+pygame.display.set_caption('Football')\r\n+pygame.display.set_icon(ballImg)\r\n+\r\n+# Define colors and other settings\r\n+white = (255, 255, 255)\r\n+black = (0, 0, 0)\r\n+red = (255, 0, 0)\r\n+green = (0, 255, 0)\r\n+blue = (0, 0, 255)\r\n+goal_width = goalLeftImg.get_rect().size[0]\r\n+goal_height = goalLeftImg.get_rect().size[1]\r\n+\r\n+# Initialize positions and other variables\r\n+gravityAcceleration = 0.3\r\n+horizontalAcceleration = 0\r\n+verticalSpeed = [0, 0]\r\n+horizontalSpeed = [0, 0]\r\n+ball_x, ball_y = 600, 300\r\n+\r\n+boyGravityAcceleration = 0.3\r\n+boy_x, boy_y = display_width / 2, display_height - boyFirstRightNormalImg.get_rect().size[1]\r\n+boySecond_x, boySecond_y = display_width / 4, display_height - boySecondRightNormalImg.get_rect().size[1]\r\n+\r\n+score_left = 0\r\n+score_right = 0\r\n+\r\n+def goal(x1, y1, x2, y2):\r\n+    screen.blit(goalLeftImg, (x1, y1))\r\n+    screen.blit(goalRightImg, (x2, y2))\r\n+\r\n+def ball(x, y):\r\n+    screen.blit(ballImg, (x, y))\r\n+\r\n+def firstBoy(type, x, y):\r\n+    if type == 'normal left':\r\n+        screen.blit(boyFirstLeftNormalImg, (x, y))\r\n+    elif type == 'normal right':\r\n+        screen.blit(boyFirstRightNormalImg, (x, y))\r\n+    elif type == 'kick left':\r\n+        screen.blit(boyFirstLeftKickImg, (x, y))\r\n+    elif type == 'kick right':\r\n+        screen.blit(boyFirstRightKickImg, (x, y))\r\n+\r\n+def secondBoy(type, x, y):\r\n+    if type == 'normal left':\r\n+        screen.blit(boySecondLeftNormalImg, (x, y))\r\n+    elif type == 'normal right':\r\n+        screen.blit(boySecondRightNormalImg, (x, y))\r\n+    elif type == 'kick left':\r\n+        screen.blit(boySecondLeftKickImg, (x, y))\r\n+    elif type == 'kick right':\r\n+        screen.blit(boySecondRightKickImg, (x, y))\r\n+\r\n+intro.game_intro(screen, display_width, display_height, sound)\r\n+\r\n+crashed = False\r\n+while not crashed:\r\n     for event in pygame.event.get():\r\n         if event.type == pygame.QUIT:\r\n-            running = False\r\n+            crashed = True\r\n \r\n+        if event.type == pygame.KEYDOWN:\r\n+            # Add movement controls for players as in original code\r\n+            pass\r\n+\r\n     # Display the current frame as background\r\n     screen.blit(backImg_frames[frame_index], (0, 0))\r\n+    frame_index = (frame_index + 1) % len(backImg_frames)\r\n \r\n-    # Update to the next frame\r\n-    frame_index = (frame_index + 1) % len(backImg_frames)  # Loop back to the first frame if it reaches the end\r\n+    # Draw goals and ball\r\n+    goal(0, display_height - goal_height, display_width - goal_width, display_height - goal_height)\r\n+    ball(ball_x, ball_y)\r\n \r\n-    # (Add game objects or player controls here if needed)\r\n+    # Display score\r\n+    largeText = pygame.font.Font('freesansbold.ttf', 30)\r\n+    TextSurf, TextRect = displayText.display_text(f\"{score_left} | {score_right}\", largeText)\r\n+    TextRect.center = (display_width / 2, 20)\r\n+    screen.blit(TextSurf, TextRect)\r\n \r\n-    # Update the display\r\n     pygame.display.flip()\r\n-\r\n-    # Control the frame rate for background animation\r\n     clock.tick(background_fps)\r\n \r\n-# Quit Pygame\r\n pygame.quit()\r\n+sys.exit()\r\n"
                },
                {
                    "date": 1730185391341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n #pygame.mixer.music.play(-1)\r\n \r\n # Load GIF frames for animated background\r\n backImg_frames = []\r\n-frame_folder = 'images/campnu_frames/'  # Folder containing separated frames\r\n+frame_folder = 'B'  # Folder containing separated frames\r\n \r\n # Load each frame image into the list and scale to display size\r\n for filename in sorted(os.listdir(frame_folder)):\r\n     frame = pygame.image.load(os.path.join(frame_folder, filename))\r\n"
                },
                {
                    "date": 1730185413848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,30 +1,18 @@\n import pygame\r\n-import random\r\n-import time\r\n-import Things\r\n-import intro\r\n-import buttons\r\n-import displayText\r\n-import Paused\r\n-import sys\r\n import os\r\n \r\n-# Display settings\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n pygame.init()\r\n screen = pygame.display.set_mode((display_width, display_height))\r\n clock = pygame.time.Clock()\r\n-sound = pygame.mixer.Sound(\"sounds/sound.wav\")   \r\n-pygame.mixer.music.load('sounds/music.mp3')\r\n-#pygame.mixer.music.play(-1)\r\n \r\n # Load GIF frames for animated background\r\n backImg_frames = []\r\n-frame_folder = 'B'  # Folder containing separated frames\r\n+frame_folder = 'images/campnu_frames/'  # Folder containing separated frames\r\n \r\n # Load each frame image into the list and scale to display size\r\n for filename in sorted(os.listdir(frame_folder)):\r\n     frame = pygame.image.load(os.path.join(frame_folder, filename))\r\n@@ -34,103 +22,27 @@\n # Animation settings for background\r\n frame_index = 0\r\n background_fps = 10  # Adjust this to control the animation speed of the background\r\n \r\n-# Load images for players and goals\r\n-ballImg = pygame.image.load('images/football.png')\r\n-goalLeftImg = pygame.image.load('images/goalLeft.png')\r\n-goalRightImg = pygame.image.load('images/goalRight.png')\r\n-boyFirstLeftNormalImg = pygame.image.load('images/ronaldo.png')\r\n-boyFirstRightNormalImg = pygame.image.load('images/ronaldo.png')\r\n-boyFirstLeftKickImg = pygame.image.load('images/ronaldo_kick.png')\r\n-boyFirstRightKickImg = pygame.image.load('images/ronaldo_kick.png')\r\n-boySecondLeftNormalImg = pygame.image.load('images/messi.png')\r\n-boySecondRightNormalImg = pygame.image.load('images/messi.png')\r\n-boySecondLeftKickImg = pygame.image.load('images/messi_kick.png')\r\n-boySecondRightKickImg = pygame.image.load('images/messi_kick.png')\r\n-boyFirstLeftVictoryImg = pygame.image.load('images/ronaldo_action.png')\r\n-boySecondRightVictoryImg = pygame.image.load('images/messi_action.png')\r\n-\r\n-pygame.display.set_caption('Football')\r\n-pygame.display.set_icon(ballImg)\r\n-\r\n-# Define colors and other settings\r\n-white = (255, 255, 255)\r\n-black = (0, 0, 0)\r\n-red = (255, 0, 0)\r\n-green = (0, 255, 0)\r\n-blue = (0, 0, 255)\r\n-goal_width = goalLeftImg.get_rect().size[0]\r\n-goal_height = goalLeftImg.get_rect().size[1]\r\n-\r\n-# Initialize positions and other variables\r\n-gravityAcceleration = 0.3\r\n-horizontalAcceleration = 0\r\n-verticalSpeed = [0, 0]\r\n-horizontalSpeed = [0, 0]\r\n-ball_x, ball_y = 600, 300\r\n-\r\n-boyGravityAcceleration = 0.3\r\n-boy_x, boy_y = display_width / 2, display_height - boyFirstRightNormalImg.get_rect().size[1]\r\n-boySecond_x, boySecond_y = display_width / 4, display_height - boySecondRightNormalImg.get_rect().size[1]\r\n-\r\n-score_left = 0\r\n-score_right = 0\r\n-\r\n-def goal(x1, y1, x2, y2):\r\n-    screen.blit(goalLeftImg, (x1, y1))\r\n-    screen.blit(goalRightImg, (x2, y2))\r\n-\r\n-def ball(x, y):\r\n-    screen.blit(ballImg, (x, y))\r\n-\r\n-def firstBoy(type, x, y):\r\n-    if type == 'normal left':\r\n-        screen.blit(boyFirstLeftNormalImg, (x, y))\r\n-    elif type == 'normal right':\r\n-        screen.blit(boyFirstRightNormalImg, (x, y))\r\n-    elif type == 'kick left':\r\n-        screen.blit(boyFirstLeftKickImg, (x, y))\r\n-    elif type == 'kick right':\r\n-        screen.blit(boyFirstRightKickImg, (x, y))\r\n-\r\n-def secondBoy(type, x, y):\r\n-    if type == 'normal left':\r\n-        screen.blit(boySecondLeftNormalImg, (x, y))\r\n-    elif type == 'normal right':\r\n-        screen.blit(boySecondRightNormalImg, (x, y))\r\n-    elif type == 'kick left':\r\n-        screen.blit(boySecondLeftKickImg, (x, y))\r\n-    elif type == 'kick right':\r\n-        screen.blit(boySecondRightKickImg, (x, y))\r\n-\r\n-intro.game_intro(screen, display_width, display_height, sound)\r\n-\r\n-crashed = False\r\n-while not crashed:\r\n+# Main game loop\r\n+running = True\r\n+while running:\r\n     for event in pygame.event.get():\r\n         if event.type == pygame.QUIT:\r\n-            crashed = True\r\n+            running = False\r\n \r\n-        if event.type == pygame.KEYDOWN:\r\n-            # Add movement controls for players as in original code\r\n-            pass\r\n-\r\n     # Display the current frame as background\r\n     screen.blit(backImg_frames[frame_index], (0, 0))\r\n-    frame_index = (frame_index + 1) % len(backImg_frames)\r\n \r\n-    # Draw goals and ball\r\n-    goal(0, display_height - goal_height, display_width - goal_width, display_height - goal_height)\r\n-    ball(ball_x, ball_y)\r\n+    # Update to the next frame\r\n+    frame_index = (frame_index + 1) % len(backImg_frames)  # Loop back to the first frame if it reaches the end\r\n \r\n-    # Display score\r\n-    largeText = pygame.font.Font('freesansbold.ttf', 30)\r\n-    TextSurf, TextRect = displayText.display_text(f\"{score_left} | {score_right}\", largeText)\r\n-    TextRect.center = (display_width / 2, 20)\r\n-    screen.blit(TextSurf, TextRect)\r\n+    # (Add game objects or player controls here if needed)\r\n \r\n+    # Update the display\r\n     pygame.display.flip()\r\n+\r\n+    # Control the frame rate for background animation\r\n     clock.tick(background_fps)\r\n \r\n+# Quit Pygame\r\n pygame.quit()\r\n-sys.exit()\r\n"
                },
                {
                    "date": 1730185430084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n clock = pygame.time.Clock()\r\n \r\n # Load GIF frames for animated background\r\n backImg_frames = []\r\n-frame_folder = 'images/campnu_frames/'  # Folder containing separated frames\r\n+frame_folder = 'BG'  # Folder containing separated frames\r\n \r\n # Load each frame image into the list and scale to display size\r\n for filename in sorted(os.listdir(frame_folder)):\r\n     frame = pygame.image.load(os.path.join(frame_folder, filename))\r\n"
                },
                {
                    "date": 1730185678676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import pygame\r\n import os\r\n \r\n+\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n"
                },
                {
                    "date": 1730185684943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import pygame\r\n import os\r\n \r\n-\r\n+def ga\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n"
                },
                {
                    "date": 1730185691681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import pygame\r\n import os\r\n \r\n-def ga\r\n+def gamw\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n"
                },
                {
                    "date": 1730185699669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import pygame\r\n import os\r\n \r\n-def gamw\r\n+def gameback\r\n display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n"
                },
                {
                    "date": 1730185708314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import pygame\r\n import os\r\n \r\n-def gameback\r\n-display_width = 1200\r\n+def gamebackground():\r\n+    display_width = 1200\r\n display_height = 600\r\n \r\n # Initialize Pygame\r\n pygame.init()\r\n"
                },
                {
                    "date": 1730185726019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,11 @@\n import os\r\n \r\n def gamebackground():\r\n     display_width = 1200\r\n-display_height = 600\r\n+    display_height = 600\r\n \r\n-# Initialize Pygame\r\n-pygame.init()\r\n+# Initialize Pygamepygame.init()\r\n screen = pygame.display.set_mode((display_width, display_height))\r\n clock = pygame.time.Clock()\r\n \r\n # Load GIF frames for animated background\r\n"
                },
                {
                    "date": 1730185880563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,37 @@\n import pygame\r\n import os\r\n \r\n-def gamebackground():\r\n-    display_width = 1200\r\n-    display_height = 600\r\n+# Display settings\r\n+display_width = 1200\r\n+display_height = 600\r\n \r\n-# Initialize Pygamepygame.init()\r\n+def load_background_frames(folder, width, height):\r\n+    \"\"\"Load and scale background frames from a specified folder.\"\"\"\r\n+    frames = []\r\n+    for filename in sorted(os.listdir(folder)):\r\n+        frame = pygame.image.load(os.path.join(folder, filename))\r\n+        frame = pygame.transform.scale(frame, (width, height))\r\n+        frames.append(frame)\r\n+    return frames\r\n+\r\n+def display_background(screen, frames, frame_index):\r\n+    \"\"\"Display a single frame of the background.\"\"\"\r\n+    screen.blit(frames[frame_index], (0, 0))\r\n+    return (frame_index + 1) % len(frames)  # Update the frame index for looping\r\n+\r\n+# Initialize Pygame and set up the display\r\n+pygame.init()\r\n screen = pygame.display.set_mode((display_width, display_height))\r\n clock = pygame.time.Clock()\r\n \r\n # Load GIF frames for animated background\r\n-backImg_frames = []\r\n frame_folder = 'BG'  # Folder containing separated frames\r\n+background_frames = load_background_frames(frame_folder, display_width, display_height)\r\n \r\n-# Load each frame image into the list and scale to display size\r\n-for filename in sorted(os.listdir(frame_folder)):\r\n-    frame = pygame.image.load(os.path.join(frame_folder, filename))\r\n-    frame = pygame.transform.scale(frame, (display_width, display_height))\r\n-    backImg_frames.append(frame)\r\n-\r\n-# Animation settings for background\r\n+# Animation settings\r\n frame_index = 0\r\n-background_fps = 10  # Adjust this to control the animation speed of the background\r\n+background_fps = 10  # Animation speed\r\n \r\n # Main game loop\r\n running = True\r\n while running:\r\n@@ -30,19 +39,15 @@\n         if event.type == pygame.QUIT:\r\n             running = False\r\n \r\n     # Display the current frame as background\r\n-    screen.blit(backImg_frames[frame_index], (0, 0))\r\n+    frame_index = display_background(screen, background_frames, frame_index)\r\n \r\n-    # Update to the next frame\r\n-    frame_index = (frame_index + 1) % len(backImg_frames)  # Loop back to the first frame if it reaches the end\r\n-\r\n-    # (Add game objects or player controls here if needed)\r\n-\r\n     # Update the display\r\n     pygame.display.flip()\r\n \r\n     # Control the frame rate for background animation\r\n     clock.tick(background_fps)\r\n \r\n # Quit Pygame\r\n pygame.quit()\r\n+\r\n"
                },
                {
                    "date": 1730185970998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,9 @@\n+# background.py\r\n+\r\n import pygame\r\n import os\r\n \r\n-# Display settings\r\n-display_width = 1200\r\n-display_height = 600\r\n-\r\n def load_background_frames(folder, width, height):\r\n     \"\"\"Load and scale background frames from a specified folder.\"\"\"\r\n     frames = []\r\n     for filename in sorted(os.listdir(folder)):\r\n@@ -17,37 +15,4 @@\n def display_background(screen, frames, frame_index):\r\n     \"\"\"Display a single frame of the background.\"\"\"\r\n     screen.blit(frames[frame_index], (0, 0))\r\n     return (frame_index + 1) % len(frames)  # Update the frame index for looping\r\n-\r\n-# Initialize Pygame and set up the display\r\n-pygame.init()\r\n-screen = pygame.display.set_mode((display_width, display_height))\r\n-clock = pygame.time.Clock()\r\n-\r\n-# Load GIF frames for animated background\r\n-frame_folder = 'BG'  # Folder containing separated frames\r\n-background_frames = load_background_frames(frame_folder, display_width, display_height)\r\n-\r\n-# Animation settings\r\n-frame_index = 0\r\n-background_fps = 10  # Animation speed\r\n-\r\n-# Main game loop\r\n-running = True\r\n-while running:\r\n-    for event in pygame.event.get():\r\n-        if event.type == pygame.QUIT:\r\n-            running = False\r\n-\r\n-    # Display the current frame as background\r\n-    frame_index = display_background(screen, background_frames, frame_index)\r\n-\r\n-    # Update the display\r\n-    pygame.display.flip()\r\n-\r\n-    # Control the frame rate for background animation\r\n-    clock.tick(background_fps)\r\n-\r\n-# Quit Pygame\r\n-pygame.quit()\r\n-\r\n"
                },
                {
                    "date": 1730186263921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n # background.py\r\n-\r\n import pygame\r\n import os\r\n \r\n def load_background_frames(folder, width, height):\r\n"
                }
            ],
            "date": 1730185374819,
            "name": "Commit-0",
            "content": "import pygame\r\nimport os\r\n\r\ndisplay_width = 1200\r\ndisplay_height = 600\r\n\r\n# Initialize Pygame\r\npygame.init()\r\nscreen = pygame.display.set_mode((display_width, display_height))\r\nclock = pygame.time.Clock()\r\n\r\n# Load GIF frames for animated background\r\nbackImg_frames = []\r\nframe_folder = 'images/campnu_frames/'  # Folder containing separated frames\r\n\r\n# Load each frame image into the list and scale to display size\r\nfor filename in sorted(os.listdir(frame_folder)):\r\n    frame = pygame.image.load(os.path.join(frame_folder, filename))\r\n    frame = pygame.transform.scale(frame, (display_width, display_height))\r\n    backImg_frames.append(frame)\r\n\r\n# Animation settings for background\r\nframe_index = 0\r\nbackground_fps = 10  # Adjust this to control the animation speed of the background\r\n\r\n# Main game loop\r\nrunning = True\r\nwhile running:\r\n    for event in pygame.event.get():\r\n        if event.type == pygame.QUIT:\r\n            running = False\r\n\r\n    # Display the current frame as background\r\n    screen.blit(backImg_frames[frame_index], (0, 0))\r\n\r\n    # Update to the next frame\r\n    frame_index = (frame_index + 1) % len(backImg_frames)  # Loop back to the first frame if it reaches the end\r\n\r\n    # (Add game objects or player controls here if needed)\r\n\r\n    # Update the display\r\n    pygame.display.flip()\r\n\r\n    # Control the frame rate for background animation\r\n    clock.tick(background_fps)\r\n\r\n# Quit Pygame\r\npygame.quit()\r\n"
        }
    ]
}